@use './constants' as *;

@mixin render-helpers($i, $size: '') {
    .mt#{$size}--#{$i} {
        margin-top: calc($planck-length * $i);
    }

    .mr#{$size}--#{$i} {
        margin-right: calc($planck-length * $i);
    }

    .mb#{$size}--#{$i} {
        margin-bottom: calc($planck-length * $i);
    }

    .ml#{$size}--#{$i} {
        margin-left: calc($planck-length * $i);
    }

    .mx#{$size}--#{$i} {
        margin-right: calc($planck-length * $i);
        margin-left: calc($planck-length * $i);
    }

    .my#{$size}--#{$i} {
        margin-top: calc($planck-length * $i);
        margin-bottom: calc($planck-length * $i);
    }

    .m#{$size}--#{$i} {
        margin: calc($planck-length * $i);
    }

    .pt#{$size}--#{$i} {
        padding-top: calc($planck-length * $i);
    }

    .pr#{$size}--#{$i} {
        padding-right: calc($planck-length * $i);
    }

    .pb#{$size}--#{$i} {
        padding-bottom: calc($planck-length * $i);
    }

    .pl#{$size}--#{$i} {
        padding-left: calc($planck-length * $i);
    }

    .px#{$size}--#{$i} {
        padding-right: calc($planck-length * $i);
        padding-left: calc($planck-length * $i);
    }

    .py#{$size}--#{$i} {
        padding-top: calc($planck-length * $i);
        padding-bottom: calc($planck-length * $i);
    }

    .p#{$size}--#{$i} {
        padding: calc($planck-length * $i);
    }
}

// Generate margin and padding classes.
@for $i from 0 through 15 {
    @media only screen and (width >= 0) {
        @include render-helpers($i);
    }
    @media only screen and (min-width: $breakpoint-small) {
        @include render-helpers($i, '-small');
    }
    @media only screen and (min-width: $breakpoint-medium) {
        @include render-helpers($i, '-medium');
    }
    @media only screen and (min-width: $breakpoint-large) {
        @include render-helpers($i, '-large');
    }
    @media only screen and (min-width: $breakpoint-extra-large) {
        @include render-helpers($i, '-extra-large');
    }
}

// Box Sizing
.bs--border {
    box-sizing: border-box;
}

// Alignment
.center {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    min-height: 100vh;

    & > * {
        flex: 1;
    }
}

// Create color helper classes.
.color-blue {
    color: $color-blue;
}

.color-black {
    color: $color-black;
}

.color-green {
    color: $color-green;
}

.color-orange {
    color: $color-orange;
}

.color-red {
    color: $color-red;
}

.color-white {
    color: $color-white;
}

.background-color-blue {
    background-color: $color-blue;
}

.background-color-black {
    background-color: $color-black;
}

.background-color-green {
    background-color: $color-green;
}

.background-color-orange {
    background-color: $color-orange;
}

.background-color-red {
    background-color: $color-red;
}

.background-color-white {
    background-color: $color-white;
}

.padding-wrapper {
    box-sizing: border-box;
    padding: calc($planck-length * 4) calc($planck-length * 2) calc($planck-length * 5);

    @media only screen and (min-width: $breakpoint-medium) {
        padding: calc($planck-length * 5) calc($planck-length * 3) calc($planck-length * 7);
    }
}

%article {
    font-size: 18px;
    line-height: 1.5;
    letter-spacing: 0;

    @media only screen and (min-width: $breakpoint-medium) {
        font-size: 20px;
    }
}

.article {
    @extend %article;

    * {
        @extend %article;
    }
}

.scroll-disabled {
    overflow: hidden;
}
